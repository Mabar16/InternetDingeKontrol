/*
 * generated by Xtext 2.20.0
 */
package sdu.mdsd.scoping

import javax.inject.Inject
import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.EReference
import org.eclipse.xtext.scoping.Scopes
import sdu.mdsd.generator.IoTModelUtil
import sdu.mdsd.ioT.ExpressionRight

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
class IoTScopeProvider extends AbstractIoTScopeProvider {
		
	@Inject extension IoTModelUtil
	
	override getScope(EObject context, EReference ref) {
		if (context instanceof ExpressionRight){
			//val add = context as AddToList
			val device = context.getContainingDevice
			return Scopes.scopeFor(device.program.variables, Scopes.scopeFor(device.classHierarchyVariables, Scopes.scopeFor(device.getModel.devices)))
		}
		return super.getScope(context, ref)
	}
	/*
	def getScopeForVar(EObject context) {
		if (context instanceof ExpressionRight){
			//val add = context as AddToList
			val device = context.getContainingDevice
			return Scopes.scopeFor(device.program.variables, Scopes.scopeFor(device.classHierarchyVariables))
		}
		return IScope.NULLSCOPE
	}
	 */
}
