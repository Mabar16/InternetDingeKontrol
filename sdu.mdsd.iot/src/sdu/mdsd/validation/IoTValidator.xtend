/*
 * generated by Xtext 2.20.0
 */
package sdu.mdsd.validation

import org.eclipse.xtext.nodemodel.util.NodeModelUtils
import org.eclipse.xtext.validation.Check
import sdu.mdsd.ioT.Device
import javax.inject.Inject
import sdu.mdsd.ioT.IoTPackage
import sdu.mdsd.ioT.IoTDevice
import sdu.mdsd.ioT.Program
import sdu.mdsd.ioT.ControllerDevice
import com.google.common.collect.HashMultimap
import sdu.mdsd.ioT.Model
import sdu.mdsd.ioT.NamedElement
import sdu.mdsd.generator.IoTModelUtil
import sdu.mdsd.ioT.Variable
import sdu.mdsd.scoping.IoTScopeProvider
import sdu.mdsd.ioT.Loop

/**
 * This class contains custom validation rules. 
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
class IoTValidator extends AbstractIoTValidator {
	
	protected static val ISSUE_CODE_PREFIX =    "sdu.mdsd.iot."
	public static val HIERARCHY_CYCLE =     ISSUE_CODE_PREFIX + "HierarchyCycle";
	
	@Inject extension IoTModelUtil
	
	@Check def checkClassHierarchy(Device d){
		if (d.classHierarchy.contains(d)){
			switch(d){
				IoTDevice: error("cycle in inheritance of device '" + d.name + "'",  IoTPackage.eINSTANCE.getIoTDevice_Parent(),  HIERARCHY_CYCLE, d.parent.name)
				ControllerDevice: error("cycle in inheritance of device '" + d.name + "'",  IoTPackage.eINSTANCE.getControllerDevice_Parent(),  HIERARCHY_CYCLE, d.parent.name)
			}
			
		}
	}
	
	public static val WRONG_METHOD_OVERRIDE =  ISSUE_CODE_PREFIX + "WrongMethodOverride"
	public static val NO_SUPER_OVERRIDE =  "Override cannot be used as this device does not inherit from an abstract device."	
	
	@Check def checkLegalOverrides(Loop loop) {
		val text = NodeModelUtils.getTokenText(NodeModelUtils.findActualNodeFor(loop))
		val d = getContainingDevice(loop)

		switch (d) {
			IoTDevice: {
				if (text.contains('override')) {
					// Check if the parent has a loop with the same name
					if (d.parent === null) {
						error(
							NO_SUPER_OVERRIDE,
							IoTPackage.eINSTANCE.namedElement_Name,
							WRONG_METHOD_OVERRIDE
						)
					}
						if (!d.parent.program.loops.map[name].toList.contains(loop.name)) {
							error(
								"Super does not implement loop '" + loop.name + "'",
								IoTPackage.eINSTANCE.namedElement_Name,
								WRONG_METHOD_OVERRIDE
							)
						}
						System.out.println("OVERRIDE"+d.parent.program.loops.map[name])
						System.out.println("OVERRIDE"+loop.name)
				}
			}
			ControllerDevice: {
				if (text.contains('override')) {
					// Check if the parent has a loop with the same name
					if (d.parent === null) {
						error(NO_SUPER_OVERRIDE,
							IoTPackage.eINSTANCE.namedElement_Name, WRONG_METHOD_OVERRIDE)
					}
						if (!d.parent.program.loops.map[name].toList.contains(loop.name)) {
							error("Super does not implement loop '" + loop.name + "'",
								IoTPackage.eINSTANCE.namedElement_Name, WRONG_METHOD_OVERRIDE)
						}
				}
			}
		}
	}
	


	public static val UNUSED_ELEMENT = ISSUE_CODE_PREFIX + "UnusedElement"
	

	
	@Check def void checkNoDuplicateVariables(Program p){
		checkNoDuplicateElements(p.connectStatements, "variables")
		checkNoDuplicateElements(p.variables, "connect statements")
		checkNoDuplicateElements(p.listenStatements, "listen statements")
		checkNoDuplicateElements(p.loops, "loops")
	}
	
	@Check def void checkNoDuplicateDeclarations(Model m){
		checkNoDuplicateElements(m.devices, "devices")
		checkNoDuplicateElements(m.externalDeclarations, "externals")
		checkNoDuplicateElements(m.configs, "configs")
	}
	
	public static val DUPLICATE_ELEMENT = ISSUE_CODE_PREFIX + "DuplicateElement"
	
	def private void checkNoDuplicateElements(Iterable<? extends NamedElement> elements, String desc) {
		val multiMap = HashMultimap.create()
		
		for (e : elements)
			multiMap.put(e.name, e)
			
		for (entry : multiMap.asMap.entrySet) {
			val duplicates = entry.value
			if (duplicates.size > 1) {
				for (d : duplicates)
					error(
						"Duplicate " + desc + " '" + d.name + "'", d, IoTPackage.eINSTANCE.namedElement_Name, DUPLICATE_ELEMENT
					)
			}
		}
	}
		
}
