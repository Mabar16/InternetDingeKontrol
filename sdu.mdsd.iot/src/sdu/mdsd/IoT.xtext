grammar sdu.mdsd.IoT with org.eclipse.xtext.common.Terminals
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
generate ioT "http://www.mdsd.sdu/IoT"

Model:
	externalDeclarations+=ExternalDeclaration*
	configs+=Config*
	devices+=Device*
;


terminal IP returns ecore::EString: INT'.'INT'.'INT'.'INT; // IP
terminal WINDOWS_SERIAL returns ecore::EString: 'COM'INT;

ExternalDeclaration:
	'external' name=ID // '(' type=STRING ')' // Commented out due to not being used
;

NamedElement:
	Config | Device | VarOrList | Loop | WifiStatement | ListenStatement | ConnectStatement
;

NamedDeclaration:
	VarOrList | Loop | ConnectStatement
;

/*
 * Configurations
 */
Config:
	ConnectionConfig | DeviceConfig
;

DeviceConfig returns Config:
	{DeviceConfig}'deviceConfig' name=ID '{'
		declarations+=Declaration*
	'}'
;

ConnectionConfig returns Config:
	{ConnectionConfig} 'connectionConfig' name=ID '{'
		'type' ':' type=ConfigType
		declarations+=Declaration*
	'}'
;

ConfigType:
	'SERIAL' | 'WLAN'
;

Declaration:
	key=STRING':'value=STRING
;

/*
 * Device 
 */
Device:
	IoTDevice | ControllerDevice
;

ControllerDevice returns Device:
	{ControllerDevice} (abstract='abstract')? 'controller' 'device' name=ID ('extends' parent=[ControllerDevice])? '{'
		program=Program
	'}'
;

IoTDevice returns Device:
	{IoTDevice} (abstract='abstract')? 'iot' 'device' name=ID ('extends' parent=[IoTDevice])? '{'
		program=Program
	'}'
;

Program:
	{Program} (wifiStatement=WifiStatement)?
	connectStatements+=ConnectStatement*
	variables+=VarOrList*
	listenStatements+=ListenStatement*
	loops+=Loop*
;

ListenStatement:
	(name=ID)? 'listen' 'on' ip=IP ':' port=INT '->' body=ExpressionRight
;

WifiStatement:
	(name=ID)? 'setup' connectionConfig=[ConnectionConfig]
;

ConnectStatement:
		name=ID 'connect' 'to' device=[Device] 'on' address=Address 'using' configuration=[ConnectionConfig]
;

Address:
	{IpAddress} value=IP | 
	{WindowsSerialAddress} value=WINDOWS_SERIAL | 
	{UnixSerialAddress} value=STRING
;


VarOrList:
	({Variable}'var' name=ID  ('=' value=Expression)? | {PyList} 'list' name=ID) 
;

Loop:
	(override='override')? name=ID ('always'|'every' timeVal=Expression timeUnit=TIMEUNIT)'{'
		commands+=Command*
	'}'

;

TIMEUNIT:
	{MILLISECONDS} 	'MILLISECONDS' 	|
	{SECONDS} 		'SECONDS' 		|
	{MINUTES} 		'MINUTES'		|
	{HOURS} 		'HOURS'			|
	{DAYS} 			'DAYS'			|
	{WEEKS} 		'WEEKS'					

;


Command:
	Action | ArrowCommand | IfStatement
;

Action returns Command:
	ClearListAction |
	LEDAction
;

ClearListAction returns Action:
	{ClearListAction} 'clear' list=[PyList]
;

LEDAction returns Action:
	{LEDAction} 'LED' state=('ON'|'OFF')
;

ArrowCommand returns Command:
	{ArrowCommand} left=ExpressionLeft '->' right=ExpressionRight
;

ExpressionLeft:
	 ExternalOf | ReadSensor | ReadConnection | ReadVariable | Expression
;

Expression:
	BoolExpression | IntExpression | {VarAccess} variableName=[VarOrList]
;

BoolExpression:
	value=Bool
;

IntExpression:
	value=INT
;

ReadVariable:
	'read' 'var' value=[Variable]
;

ReadConnection:
	'read' 'from' source=[Device]
;

ExternalOf:
	method=[ExternalDeclaration] 'of' target=[VarOrList]
;

ReadSensor:
	'read' 'from' sensor=SENSOR	
;

SENSOR:
	{LIGHTSENSOR} 'LIGHTSENSOR' |
	{TEMPERATURE} 'TEMPERATURE'	|
	{HUMIDITY}	'HUMIDITY'	
;


ExpressionRight:
	SendCommand | AddToList | ToVar | ExternalRight | Block
;

Block:
	'{' commands+=Command+ '}'
;

ToVar returns ExpressionRight:
	{ToVar} 'to' variable=[Variable]
;

AddToList returns ExpressionRight:
	{AddToList} 'add' 'to' list=[PyList]
;

ExternalRight:
	method=[ExternalDeclaration] 'of' 'value'
;

SendCommand returns ExpressionRight:
	{SendCommand} 'send' 'to' target=[Device]
;

IfStatement returns Command:
	{IfStatement}'if' condition=Comparison '{' commands+=Command+ '}' (elseBlock=ElseBlock)?
;

ElseBlock:
	{ElseBlock}'else' '{' commands+=Command+ '}'
;


Comparison returns Comparison:
	OR	
;

OR returns Comparison:
	AND ({OR.left=current} ('||'|'OR') right=AND)*
;

AND returns Comparison:
	EQL ({AND.left=current} ('&&'|'AND') right=EQL)*
;

EQL returns Comparison:
	Item ({EQL.left=current} op=ComparisonOp right=Item)?
;

Item returns Comparison:
	Parenthasis |
	{ItemVariable} value=[Variable] |
	{ItemInt} value=INT |
	{ItemBool} value=Bool
;

Parenthasis returns Comparison:
	'(' Comparison ')' 
;

ComparisonOp:
	{GT}op= '>'  |
	{LT}op= '<'  | 
	{LE}op= '<=' |
	{GE}op= '>=' | 
	{EQ}op= '==' |
	{NE}op= '!='
;

Bool:
	{True} ('TRUE'|'true') | {False} ('FALSE'|'false')
;

